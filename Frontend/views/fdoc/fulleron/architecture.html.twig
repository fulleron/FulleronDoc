<div class="row">
    <div class="col-lg-3">
        <div class="well" id="fdoc-navbar">
            <ul class="nav">
                <li>
                    <a href="#arch-Overview">Overview</a>
                </li>

                <li>
                    <a href="#arch-FileStructure">File Structure</a>
                    <ul class="nav">
                        <li>
                            <a href="#arch-FileStructure-Application">Application</a>
                        </li>
                        <li>
                            <a href="#arch-FileStructure-Module">Module</a>
                        </li>
                    </ul>
                </li>
                <li>
                    <a href="#arch-Motivations">Motivations</a>
                </li>
                <li>
                    <a href="#arch-Extending">Extending</a>
                    <ul class="nav">
                        <li><a href="#arch-Extending-Configuration">Configuration</a></li>
                        <li><a href="#arch-Extending-Classes">Classes</a></li>
                        <li><a href="#arch-Extending-DBTables">DB Tables</a></li>
                        <li><a href="#arch-Extending-Templates">Templates</a></li>
                        <li><a href="#arch-Extending-Layouts">Layouts</a></li>
                        <li><a href="#arch-Extending-Javascript">Javascript</a></li>
                        <li><a href="#arch-Extending-CSS">CSS</a></li>
                    </ul>
                </li>
            </ul>
        </div>
    </div>
    <div class="col-lg-9">
        <div class="fdoc-section">
            <div class="page-header">
                <h1 id="arch-Overview">Overview</h1>
            </div>
        </div>
        <div class="fdoc-section">
            <div class="page-header">
                <h1 id="arch-FileStructure">File Structure</h1>
            </div>

            <h3 id="arch-FileStructure-Application">Application</h3>
<pre class="well well-small">index.php   .   .   .   .   .   .   .   Main Frontend entry point
cron.php    .   .   .   .   .   .   .   Crontab entry point
resize.php  .   .   .   .   .   .   .   Live resize thumbnails script
admin/
.   index.php   .   .   .   .   .   .   Admin entry point
api/
.   index.php   .   .   .   .   .   .   API entry point
FCom/   .   .   .   .   .   .   .   .   Core bundled modules
    {Module}/

dlc/    .   .   .   .   .   .   .   .   Downloadable modules storage
.   {Vendor}/
.   .   {Module}/   .   .   .   .   .   Module Files (see the next section)

local/  .   .   .   .   .   .   .   .   Local modules storage
.   {Vendor}/
.   .   {Module}/

media/  .   .   .   .   .   .   .   .   Web accessible assets (images, documents)

storage/    .   .   .   .   .   .   .   Web protected, writable storage
.   config/     .   .   .   .   .   .   Configuration files
.   .   db.yml      .   .   .   .   .   DB settings
.   .   core.yml    .   .   .   .   .   Module run levels and debug levels per IP
.   .   local.yml   .   .   .   .   .   Local modules configuration
.   cache/  .   .   .   .   .   .   .   Cached files
.   .   haml/   .   .   .   .   .   .   HAML templates compiled PHP files
.   .   twig/   .   .   .   .   .   .   Twig templates compiled PHP files
.   logs/       .   .   .   .   .   .   Logs storage
.   .   debug.log   .   .   .   .   .   Debug messages
.   .   errors.log  .   .   .   .   .   Fulleron errors
.   .   exceptions.log  .   .   .   .   Fulleron and PHP exceptions</pre>


            <h3 id="arch-FileStructure-Module">Module</h3>

<pre class="well well-small">{Vendor}/
.   {Module}/
.   .   manifest.yml    .   .   .   .   [1] Declaration of the module and its properties. This file is required.
.   .   Main.php    .   .   .   .   .   This class may contain common functionality of the module, used by all areas
.   .   Cron.php    .   .   .   .   .   Crontab routines
.   .   Migrate.php     .   .   .   .   [2] DB migration scripts
.   .   LICENSE     .   .   .   .   .   LICENSE text
.   .   README.md   .   .   .   .   .   Module expanded information

.   .   lib/    .   .   .   .   .   .   Store here any used 3rd party libraries
.   .   .   {3rdPartyLib}/

.   .   i18n/   .   .   .   .   .   .   Translation dictionaries
.   .   .   en_US.ini
.   .   .   de_DE.ini

.   .   Model/  .   .   .   .   .   .   Model classes
.   .   .   {ModelName}.php

.   .   View/   .   .   .   .   .   .   View classes, when special functionality required within a view
.   .   .   {ViewClass}.php

.   .   views/  .   .   .   .   .   .   View templates, which are used by all areas, usually for emails
.   .   .   email/  .   .   .   .   .   Template namespace
.   .   .   .   {email-view-name}.twig.html

.   .   Admin.php   .   .   .   .   .   Optional Admin bootstrap and admin helper methods
.   .   Admin/      .   .   .   .   .   Admin specific logic and assets
.   .   .   layout.yml  .   .   .   .   [3] Admin layout updates
.   .   .   views/  .   .   .   .   .   Admin templates
.   .   .   .   {module-namespace}/
.   .   .   .   .   {view-name}.haml
.   .   .   .   settings/   .   .   .   Admin Settings pages
.   .   .   .   .   {Vendor}_{Module}.haml
.   .   .   Controller.php  .   .   .   General admin Controller class
.   .   .   Controller/     .   .   .   For more specific features put your controllers here
.   .   .   .   {AdminFeature}.php
.   .   .   js/
.   .   .   css/
.   .   .   img/

.   .   Frontend.php    .   .   .   .   Optional Frontend bootstrap and admin helper methods
.   .   Frontend/
.   .   .   layout.yml  .   .   .   .   [3] Frontend layout updates
.   .   .   views/
.   .   .   .   static/     .   .   .   Static page templates will proxy URL request to file structure
.   .   .   .   {module-namespace}/
.   .   .   .   .   {view-name}.twig.html
.   .   .   Controller.php
.   .   .   Controller/
.   .   .   .   {FrontendFeature}.php
.   .   .   js/
.   .   .   css/
.   .   .   img/

.   .   ApiServer.php   .   .   .   .   Optional ApiServer bootstrap and admin helper methods
.   .   ApiServer/
.   .   .   V1/
.   .   .   .   Controller/
.   .   .   .   .   {ApiFeature}.php
.   .   .   .   .   {ApiFeature}_spec.txt

.   .   Tests/
.   .   .   AllTests.php
.   .   .   Model/
.   .   .   .   {Feature}Test.php</pre>
            <blockquote>
                <ol>
                    <li><a href="{{ APP.href('fdoc/buckyball/module#module-Manifest') }}">Manifest File</a></li>
                    <li><a href="{{ APP.href('fdoc/buckyball/db#db-Migration') }}">Migration Scripts</a></li>
                    <li><a href="{{ APP.href('fdoc/buckyball/layout#layout-LayoutFile') }}">Layout File</a></li>
                </ol>
            </blockquote>
        </div>

        <div class="fdoc-section">
            <div class="page-header">
                <h1 id="arch-Motivations">Motivations &amp; Conventions</h1>
            </div>

            <p>Fulleron is built upon Buckyball library and inherently is not rigid in its structure or implementation. However, the following set of conventions is recommended for clean, uniform and maintainable application.</p>

            <p><strong>Primary goal:</strong> Achieve a maintainable balance between:</p>

            <h3 id="arch-Concepts">Abstract concepts</h3>
            <ul>
                <li>Separation of concerns: files should be separated by their role in app</li>
                <li>Clear folder hierarchy: child entities should be under parent entities</li>
            </ul>

            <h3 id="arch-Conventions-HardwareLimitations">Hardware related limitations</h3>
            <ul>
                <li>Storage speed/latency: more folders/files and deeper structure affect performance</li>
                <li>CPU/Storage limitation: optimize use of bytecode caching</li>
            </ul>

            <h3 id="arch-Conventions-DeveloperNeeds">Immediate developer needs</h3>
            <ul>
                <li>Files should be intuitively found in folder structure</li>
                <li>Number of files open in IDE should be minimized</li>
                <li>Number of total files should be minimized (avoid “rice code”)</li>
                <li>Reduce number of files with the same name (not an issue in some IDEs)</li>
                <li>Ease of debugging (resolving development errors)</li>
                <li>Some local configuration files should be shared between repo copies</li>
            </ul>

            <h3 id="arch-Conventions-Maintenance">Future maintenance and flexibility</h3>
            <ul>
                <li>Ease of refactoring (renaming/moving)</li>
                <li>Ease of debugging (finding and resolving production errors)</li>
                <li>Internal extensibility (adding new features within module)</li>
                <li>External extensibility (adding/changing functionality from other modules)</li>
                <li>Core and market module files should never be changed by developer</li>
            </ul>

        </div>

        <div class="fdoc-section">
            <div class="page-header">
                <h1 id="arch-Extending">Extending and overriding existing functionality</h1>
            </div>

            <h3 id="arch-Extending-Configuration">Configuration</h3>
            <h3 id="arch-Extending-Classes">Classes</h3>
            <h3 id="arch-Extending-DBTables">DB Tables</h3>
            <h3 id="arch-Extending-Templates">Templates</h3>
            <h3 id="arch-Extending-Layouts">Layouts</h3>
            <h3 id="arch-Extending-Javascript">Javascript</h3>
            <h3 id="arch-Extending-CSS">CSS</h3>
        </div>
    </div>
</div>
